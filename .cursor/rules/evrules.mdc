---
description: 
globs: 
alwaysApply: true
---
# Shared Electric Vehicle Rental System - Cursor Rules

## Code Conventions

1. Use snake_case for variables and function names
2. Use PascalCase for PHP class names
3. Use camelCase for JavaScript variables and functions
4. All SQL queries must use prepared statements to prevent injection attacks
5. JavaScript frontend code should follow a modular organization with separate service files

## Directory Structure

1. Place PHP backend files in the root directory
2. Organize frontend resources by type (css/, js/, images/)
3. Store shared PHP helper functions in the includes/ directory
4. Keep debugging tools in the debug/ directory

## Database Operations

1. All database operations must be performed through the Database.php class
2. Use prepared statements and parameter binding for all user inputs
3. Implement transactions to ensure data consistency (e.g., for reservations and status updates)
4. Validate user permissions and input parameters before executing queries

## Map and Location Features

1. Use Leaflet.js for map visualization
2. Standardize on WGS84 coordinate system for GPS coordinates
3. Transmit location updates using HTTP POST requests
4. Process vehicle status changes according to defined status enum values (available/in_use, etc.)

## User Authentication

1. Store passwords using bcrypt hashing algorithm
2. Process authentication operations through auth.php
3. Manage user sessions using PHP SESSION
4. Handle frontend authentication through auth-service.js

## Performance and Security

1. Limit batch location uploads to 1000 entries per second
2. Control API response time to within 500ms
3. Validate and sanitize all user inputs
4. Re-verify user identity for sensitive operations (e.g., reservation status changes)

## GPS Data Processing

1. Parse GPS data using TinyGPSPlus
2. Transmit location data in JSON format
3. Send real-time updates via HTTP POST to API endpoints
4. Store location information using spatial data types in the database

## Frontend Development

1. Use modular JavaScript services to handle functionality
2. Follow CSS separation principles based on functional modules
3. Implement responsive design to accommodate different device sizes
4. Optimize event handling using event delegation 